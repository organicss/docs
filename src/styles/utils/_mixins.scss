@mixin flex-base() {
    display: flex;
    flex-wrap: wrap;
    /* Default to flex wrap as a Defensive CSS best practice.
  https://ishadeed.com/article/defensive-css/#flexbox-wrapping */
}

@mixin angle($pseudo, $flip: false, $angle: 1.5deg) {
    /* Mixin from: https://www.viget.com/articles/angled-edges-with-css-masks-and-transforms/ */
    // Possible values for $pseudo are: before, after, both
    @if $pseudo == 'before' or $pseudo == 'after' or $pseudo == 'both' {
        position: relative;
        z-index: -1;
        $selector: if($pseudo == 'both', '&:before,&:after', '&:#{$pseudo}');

        #{$selector} {
            @include layout($blockSize: 50%);
            @include position($inlineStart: 0, $inlineEnd: 0);

            background: inherit;
            content: '';
            display: block;
            position: absolute;
            z-index: -1;
            -webkit-backface-visibility: hidden; // for Chrome Windows
        }

        @if $pseudo == 'before' {
            #{$selector} {
                @include position($blockStart: 0);

                @if $flip {
                    transform: skewY($angle * -1);
                    transform-origin: 0 0;
                } @else {
                    transform: skewY($angle);
                    transform-origin: 100% 0;
                }
            }
        }

        @if $pseudo == 'after' {
            #{$selector} {
                @include position($blockEnd: 0);

                @if $flip {
                    transform: skewY($angle);
                    transform-origin: 0 100%;
                } @else {
                    transform: skewY($angle * -1);
                    transform-origin: 100%;
                }
            }
        }

        @if $pseudo == 'both' {
            &:before {
                @include position($blockStart: 0);

                @if $flip {
                    transform: skewY($angle * -1);
                    transform-origin: 0 0;
                } @else {
                    transform: skewY($angle);
                    transform-origin: 100% 0;
                }
            }

            &:after {
                @include position($blockEnd: 0);

                @if $flip {
                    transform: skewY($angle);
                    transform-origin: 0 0;
                } @else {
                    transform: skewY($angle * -1);
                    transform-origin: 100%;
                }
            }
        }
    }
}
